# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import detection_pb2 as detection__pb2


class DetectionServiceStub(object):
    """============================================================================
    Detection Service - Object Detection & Tracking
    ============================================================================

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectObjects = channel.unary_unary(
                '/sssp.ai.detection.DetectionService/DetectObjects',
                request_serializer=detection__pb2.DetectRequest.SerializeToString,
                response_deserializer=detection__pb2.DetectResponse.FromString,
                )
        self.DetectWaste = channel.unary_unary(
                '/sssp.ai.detection.DetectionService/DetectWaste',
                request_serializer=detection__pb2.DetectRequest.SerializeToString,
                response_deserializer=detection__pb2.DetectResponse.FromString,
                )
        self.DetectVandalism = channel.unary_unary(
                '/sssp.ai.detection.DetectionService/DetectVandalism',
                request_serializer=detection__pb2.DetectRequest.SerializeToString,
                response_deserializer=detection__pb2.DetectResponse.FromString,
                )
        self.DetectObjectsBatch = channel.unary_unary(
                '/sssp.ai.detection.DetectionService/DetectObjectsBatch',
                request_serializer=detection__pb2.DetectBatchRequest.SerializeToString,
                response_deserializer=detection__pb2.DetectBatchResponse.FromString,
                )
        self.DetectObjectsStream = channel.stream_stream(
                '/sssp.ai.detection.DetectionService/DetectObjectsStream',
                request_serializer=detection__pb2.DetectRequest.SerializeToString,
                response_deserializer=detection__pb2.DetectResponse.FromString,
                )
        self.GetModelInfo = channel.unary_unary(
                '/sssp.ai.detection.DetectionService/GetModelInfo',
                request_serializer=detection__pb2.ModelInfoRequest.SerializeToString,
                response_deserializer=detection__pb2.ModelInfoResponse.FromString,
                )


class DetectionServiceServicer(object):
    """============================================================================
    Detection Service - Object Detection & Tracking
    ============================================================================

    """

    def DetectObjects(self, request, context):
        """Detect all objects in a single image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectWaste(self, request, context):
        """Detect waste/trash specifically
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectVandalism(self, request, context):
        """Detect vandalism (property damage, graffiti)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectObjectsBatch(self, request, context):
        """Batch detection for multiple images
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectObjectsStream(self, request_iterator, context):
        """Stream detection (for video streams)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelInfo(self, request, context):
        """Get model information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DetectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectObjects': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectObjects,
                    request_deserializer=detection__pb2.DetectRequest.FromString,
                    response_serializer=detection__pb2.DetectResponse.SerializeToString,
            ),
            'DetectWaste': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectWaste,
                    request_deserializer=detection__pb2.DetectRequest.FromString,
                    response_serializer=detection__pb2.DetectResponse.SerializeToString,
            ),
            'DetectVandalism': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectVandalism,
                    request_deserializer=detection__pb2.DetectRequest.FromString,
                    response_serializer=detection__pb2.DetectResponse.SerializeToString,
            ),
            'DetectObjectsBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectObjectsBatch,
                    request_deserializer=detection__pb2.DetectBatchRequest.FromString,
                    response_serializer=detection__pb2.DetectBatchResponse.SerializeToString,
            ),
            'DetectObjectsStream': grpc.stream_stream_rpc_method_handler(
                    servicer.DetectObjectsStream,
                    request_deserializer=detection__pb2.DetectRequest.FromString,
                    response_serializer=detection__pb2.DetectResponse.SerializeToString,
            ),
            'GetModelInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelInfo,
                    request_deserializer=detection__pb2.ModelInfoRequest.FromString,
                    response_serializer=detection__pb2.ModelInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sssp.ai.detection.DetectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DetectionService(object):
    """============================================================================
    Detection Service - Object Detection & Tracking
    ============================================================================

    """

    @staticmethod
    def DetectObjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sssp.ai.detection.DetectionService/DetectObjects',
            detection__pb2.DetectRequest.SerializeToString,
            detection__pb2.DetectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectWaste(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sssp.ai.detection.DetectionService/DetectWaste',
            detection__pb2.DetectRequest.SerializeToString,
            detection__pb2.DetectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectVandalism(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sssp.ai.detection.DetectionService/DetectVandalism',
            detection__pb2.DetectRequest.SerializeToString,
            detection__pb2.DetectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectObjectsBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sssp.ai.detection.DetectionService/DetectObjectsBatch',
            detection__pb2.DetectBatchRequest.SerializeToString,
            detection__pb2.DetectBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectObjectsStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/sssp.ai.detection.DetectionService/DetectObjectsStream',
            detection__pb2.DetectRequest.SerializeToString,
            detection__pb2.DetectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModelInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sssp.ai.detection.DetectionService/GetModelInfo',
            detection__pb2.ModelInfoRequest.SerializeToString,
            detection__pb2.ModelInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
