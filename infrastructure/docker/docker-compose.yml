version: "3.9"

# ==================================================
# SSSP - Smart Security & Sustainability Platform
# Development Docker Compose Configuration
# ==================================================

x-common-env: &common-env
  ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
  JWT_ISSUER: ${JWT_ISSUER:-sssp.local}
  JWT_AUDIENCE: ${JWT_AUDIENCE:-sssp.api}
  SQLSERVER_CONNSTRING: ${SQLSERVER_CONNSTRING}
  REDIS_URL: ${REDIS_URL:-redis://redis:6379}
  RABBITMQ_URL: ${RABBITMQ_URL:-amqp://guest:guest@rabbitmq:5672}
  AI_GRPC_URL: ${AI_GRPC_URL:-http://ai-fastapi:50051}
  AI_REST_URL: ${AI_REST_URL:-http://ai-fastapi:8000}
  S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
  S3_BUCKET: ${S3_BUCKET:-sssp}
  S3_ACCESS_KEY: ${S3_ACCESS_KEY:-admin}
  S3_SECRET_KEY: ${S3_SECRET_KEY:-admin12345}
  ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:5173}

networks:
  sssp-net:
    driver: bridge
    name: sssp-network

volumes:
  sqlserver-data:
    name: sssp-sqlserver-data
  redis-data:
    name: sssp-redis-data
  rabbitmq-data:
    name: sssp-rabbitmq-data
  minio-data:
    name: sssp-minio-data

services:
  # ==================== DATABASE ====================
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sssp-sqlserver
    hostname: sqlserver
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: ${SA_PASSWORD:-Your_password123!}
      MSSQL_PID: Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
    networks:
      - sssp-net
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$${SA_PASSWORD}" -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
    restart: unless-stopped

  # ==================== CACHE ====================
  redis:
    image: redis:7-alpine
    container_name: sssp-redis
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - sssp-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  # ==================== MESSAGE BROKER ====================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: sssp-rabbitmq
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - sssp-net
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # ==================== OBJECT STORAGE ====================
  minio:
    image: quay.io/minio/minio
    #image: minio/minio:RELEASE.2024-09-22T00-00-00Z
    container_name: sssp-minio
    hostname: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-admin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-admin12345}
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console
    volumes:
      - minio-data:/data
    networks:
      - sssp-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ==================== AI SERVICE ====================
  ai-fastapi:
    build:
      context: ../../apps/ai
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=3.11
    container_name: sssp-ai-fastapi
    hostname: ai-fastapi
    env_file:
      - .env
    environment:
      <<: *common-env
      PYTHONUNBUFFERED: "1"
      MODEL_CACHE_DIR: /app/models
      GPU_ENABLED: ${GPU_ENABLED:-false}
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8000:8000" # REST API
      - "50051:50051" # gRPC
    volumes:
      - ../../apps/ai/src:/app/src:ro
      - ../../apps/ai/models:/app/models
    networks:
      - sssp-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  # ==================== API (.NET) ====================
  api-dotnet:
    build:
      context: ../../
      dockerfile: apps/api/Dockerfile
      args:
        - DOTNET_VERSION=9.0
    container_name: sssp-api-dotnet
    hostname: api-dotnet
    env_file:
      - .env
    environment:
      <<: *common-env
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY:-dev-placeholder}
      ENABLE_SWAGGER: ${ENABLE_SWAGGER:-true}
      LOGGING_LEVEL: ${LOGGING_LEVEL:-Information}
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      ai-fastapi:
        condition: service_healthy
      # minio:
      #   condition: service_healthy
    ports:
      - "8080:8080"   # HTTP
      - "8443:8443"   # HTTPS (optional)
    networks:
      - sssp-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # ==================== WEB DASHBOARD ====================
  web-dashboard:
    build:
      context: ../../apps/web
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=20
        - VITE_API_BASE=${VITE_API_BASE:-http://localhost:8080}
        - VITE_WS_BASE=${VITE_WS_BASE:-ws://localhost:8080}
    container_name: sssp-web-dashboard
    hostname: web-dashboard
    depends_on:
      api-dotnet:
        condition: service_healthy
    ports:
      - "5173:80" # Nginx serves on 80
    networks:
      - sssp-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
